#include <Arduino.h>
#include <Display.h>

Display display;

void convertGridToModules(const uint32_t* grid);

void setup() {
    // display.draw();
    // display.update();
    SPI.begin();
    pinMode(CS,OUTPUT);
    // Serial.begin(9600);
}

void sendToDisplay(uint8_t address, uint8_t data) {
    // digitalWrite(CS,LOW);
    SPI.transfer(address);
    SPI.transfer(data);
    // digitalWrite(CS,HIGH);
}

uint8_t modules[16][8] = {};

const uint32_t grid_drawing_a[32] = {
    0b00000000000000000000000000000000,
    0b00000000000000000000011100000000,
    0b00000000000000000111111110000000,
    0b00000000000000011111111111100000,
    0b00000000000001111111111111111000,
    0b00000000000111111111111111111100,
    0b00000000001111111111111111111110,
    0b00000000001111111111111111111110,
    0b00000000000111111111111111111100,
    0b00000000000001111111111111111000,
    0b00000000000000011111111111100000,
    0b00000000000000000111111110000000,
    0b00000000000000000000011100000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000
};

const uint32_t grid_drawing_b[32] = {
    0b00000000000000000000100000000000,
    0b00000000000000000001110000000000,
    0b00000000000000000011111000000000,
    0b00000000000000000111111100000000,
    0b00000000000000001111111110000000,
    0b00000000000000011111111111000000,
    0b00000000000000111111111111100000,
    0b00000000000001111111111111110000,
    0b00000000000000111111111111100000,
    0b00000000000000011111111111000000,
    0b00000000000000001111111110000000,
    0b00000000000000000111111100000000,
    0b00000000000000000011111000000000,
    0b00000000000000000001110000000000,
    0b00000000000000000000100000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000111111111100000000000000000,
    0b00000111000011100000000000000000,
    0b00000110000001100000000000000000,
    0b00000101100110100000000000000000,
    0b00000100010000100000000000000000,
    0b00000101101100100000000000000000,
    0b00000110010001100000000000000000,
    0b00000111000011100000000000000000,
    0b00000111111111100000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000
};



void loop() {
    convertGridToModules(grid_drawing_a);

    for (uint8_t i = 0; i < 8; i++) {
        digitalWrite(CS,LOW);
        for (int8_t j = 16; j >= 0; j--) {
            sendToDisplay(i+1, modules[j][i]);
            Serial.print(modules[j][i]);
        }
        digitalWrite(CS,HIGH);
        Serial.println();
    }
    delay(2000);

    convertGridToModules(grid_drawing_b);

    for (uint8_t i = 0; i < 8; i++) {
        digitalWrite(CS,LOW);
        for (int8_t j = 16; j >= 0; j--) {
            sendToDisplay(i+1, modules[j][i]);
            Serial.print(modules[j][i]);
        }
        digitalWrite(CS,HIGH);
        Serial.println();
    }
    delay(2000);

}



void convertGridToModules(const uint32_t* grid) {
    const uint8_t horizontalModules = 4;

    for (uint8_t pixelRow = 0; pixelRow < 32; pixelRow++) {
        const uint8_t moduleRow = pixelRow % 8;
        const uint8_t idk = pixelRow / 8;

        const uint32_t row = grid[pixelRow];
        for (uint8_t moduleColumn = 0; moduleColumn < horizontalModules; moduleColumn++) {
            const uint8_t segmentRow = (row >> (8 * moduleColumn)) & 0xFF;
            const uint8_t moduleNumber = (idk * 4) + moduleColumn;
            modules[moduleNumber][moduleRow] = segmentRow;
        }
    }
}